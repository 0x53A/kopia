// Code generated by protoc-gen-go.
// source: repo/format.proto
// DO NOT EDIT!

/*
Package repo is a generated protocol buffer package.

It is generated from these files:
	repo/format.proto
	repo/indirect.proto
	repo/objectid.proto

It has these top-level messages:
	Format
	IndirectObjectEntry
	ObjectID
*/
package repo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type EncryptionAlgorithm int32

const (
	EncryptionAlgorithm_NONE EncryptionAlgorithm = 0
	EncryptionAlgorithm_AES  EncryptionAlgorithm = 1
)

var EncryptionAlgorithm_name = map[int32]string{
	0: "NONE",
	1: "AES",
}
var EncryptionAlgorithm_value = map[string]int32{
	"NONE": 0,
	"AES":  1,
}

func (x EncryptionAlgorithm) String() string {
	return proto.EnumName(EncryptionAlgorithm_name, int32(x))
}
func (EncryptionAlgorithm) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// ObjectIDFormat describes the format of repository objects.
type ObjectIDFormat int32

const (
	// Format not specified.
	ObjectIDFormat_INVALID ObjectIDFormat = 0
	// MD5 (no encryption, MD5 hashing, only used for testing)
	ObjectIDFormat_TESTONLY_MD5 ObjectIDFormat = 1
	// HMAC-SHA256 hash of content used as object ID, no encryption.
	ObjectIDFormat_UNENCYPTED_HMAC_SHA256 ObjectIDFormat = 2
	// HMAC-SHA256 hash folded into 128 bits used as object ID, no encryption.
	ObjectIDFormat_UNENCYPTED_HMAC_SHA256_128 ObjectIDFormat = 3
	// HMAC-SHA512 hash of content, top part of the hash used as 256-bit object ID,
	// bottom part used as 256-bit encryption key.
	ObjectIDFormat_ENCRYPTED_HMAC_SHA512_AES256 ObjectIDFormat = 4
	// HMAC-SHA512_384 hash over contents, top part of the hash used as 128-bit object ID,
	// bottom part used as 256-bit encryption key.
	ObjectIDFormat_ENCRYPTED_HMAC_SHA512_384_AES256 ObjectIDFormat = 5
)

var ObjectIDFormat_name = map[int32]string{
	0: "INVALID",
	1: "TESTONLY_MD5",
	2: "UNENCYPTED_HMAC_SHA256",
	3: "UNENCYPTED_HMAC_SHA256_128",
	4: "ENCRYPTED_HMAC_SHA512_AES256",
	5: "ENCRYPTED_HMAC_SHA512_384_AES256",
}
var ObjectIDFormat_value = map[string]int32{
	"INVALID":                          0,
	"TESTONLY_MD5":                     1,
	"UNENCYPTED_HMAC_SHA256":           2,
	"UNENCYPTED_HMAC_SHA256_128":       3,
	"ENCRYPTED_HMAC_SHA512_AES256":     4,
	"ENCRYPTED_HMAC_SHA512_384_AES256": 5,
}

func (x ObjectIDFormat) String() string {
	return proto.EnumName(ObjectIDFormat_name, int32(x))
}
func (ObjectIDFormat) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// Format describes the format of object data.
type Format struct {
	Version           int32          `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	ObjectFormat      ObjectIDFormat `protobuf:"varint,2,opt,name=object_format,json=objectFormat,enum=kopia.repo.ObjectIDFormat" json:"object_format,omitempty"`
	Secret            []byte         `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
	MaxInlineBlobSize int32          `protobuf:"varint,4,opt,name=max_inline_blob_size,json=maxInlineBlobSize" json:"max_inline_blob_size,omitempty"`
	MaxBlobSize       int32          `protobuf:"varint,5,opt,name=max_blob_size,json=maxBlobSize" json:"max_blob_size,omitempty"`
}

func (m *Format) Reset()                    { *m = Format{} }
func (m *Format) String() string            { return proto.CompactTextString(m) }
func (*Format) ProtoMessage()               {}
func (*Format) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func init() {
	proto.RegisterType((*Format)(nil), "kopia.repo.Format")
	proto.RegisterEnum("kopia.repo.EncryptionAlgorithm", EncryptionAlgorithm_name, EncryptionAlgorithm_value)
	proto.RegisterEnum("kopia.repo.ObjectIDFormat", ObjectIDFormat_name, ObjectIDFormat_value)
}

var fileDescriptor0 = []byte{
	// 357 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x91, 0xcb, 0x6a, 0xf2, 0x40,
	0x14, 0xc7, 0xbf, 0x78, 0xfd, 0x38, 0x5e, 0x88, 0xd3, 0x22, 0xc1, 0x5e, 0x10, 0xe9, 0x42, 0x5c,
	0x44, 0x8c, 0xb5, 0xb8, 0x2b, 0xd1, 0xa4, 0x18, 0xd0, 0x58, 0x12, 0x5b, 0xb0, 0x9b, 0xc1, 0x84,
	0xd4, 0xa6, 0x35, 0x99, 0x30, 0xa6, 0xa5, 0xed, 0x6b, 0xf5, 0x45, 0xfa, 0x48, 0x9d, 0x8c, 0x8a,
	0x08, 0x6e, 0x06, 0xce, 0xfc, 0x7e, 0xe7, 0x3f, 0x67, 0x38, 0x50, 0xa1, 0x5e, 0x44, 0xda, 0xcf,
	0x84, 0x06, 0x8b, 0x58, 0x8e, 0x28, 0x89, 0x09, 0x82, 0x37, 0x12, 0xf9, 0x0b, 0x39, 0x01, 0x8d,
	0x5f, 0x01, 0x72, 0x77, 0x1c, 0x22, 0x09, 0xf2, 0x1f, 0x1e, 0x5d, 0xfb, 0x24, 0x94, 0x84, 0xba,
	0xd0, 0xcc, 0x5a, 0xbb, 0x12, 0xdd, 0x42, 0x89, 0x38, 0xaf, 0x9e, 0x1b, 0xe3, 0x4d, 0x8e, 0x94,
	0x62, 0xbc, 0xac, 0xd4, 0xe4, 0x7d, 0x90, 0x3c, 0xe5, 0x82, 0xa1, 0x6d, 0xc2, 0xac, 0xe2, 0xa6,
	0x61, 0x1b, 0x5d, 0x85, 0xdc, 0xda, 0x73, 0xa9, 0x17, 0x4b, 0x69, 0xd6, 0x59, 0xb4, 0xb6, 0x15,
	0x6a, 0xc3, 0x69, 0xb0, 0xf8, 0xc4, 0x7e, 0xb8, 0xf2, 0x43, 0x0f, 0x3b, 0x2b, 0xe2, 0xe0, 0xb5,
	0xff, 0xed, 0x49, 0x19, 0xfe, 0x7e, 0x85, 0x31, 0x83, 0xa3, 0x01, 0x23, 0x36, 0x03, 0xa8, 0x01,
	0xa5, 0xa4, 0x61, 0x6f, 0x66, 0xb9, 0x59, 0x60, 0x97, 0x3b, 0xa7, 0xd5, 0x84, 0x13, 0x3d, 0x74,
	0xe9, 0x57, 0x14, 0xb3, 0xd9, 0xd5, 0xd5, 0x92, 0x50, 0x3f, 0x7e, 0x09, 0xd0, 0x7f, 0xc8, 0x98,
	0x53, 0x53, 0x17, 0xff, 0xa1, 0x3c, 0xa4, 0x55, 0xdd, 0x16, 0x85, 0xd6, 0x8f, 0x00, 0xe5, 0xc3,
	0xb9, 0x51, 0x01, 0xf2, 0x86, 0xf9, 0xa8, 0x8e, 0x0d, 0x8d, 0x89, 0x22, 0x14, 0x67, 0xba, 0x3d,
	0x9b, 0x9a, 0xe3, 0x39, 0x9e, 0x68, 0x3d, 0x51, 0x40, 0x35, 0xa8, 0x3e, 0x98, 0xba, 0x39, 0x9c,
	0xdf, 0xcf, 0x74, 0x0d, 0x8f, 0x26, 0xea, 0x10, 0xdb, 0x23, 0x55, 0xe9, 0xdd, 0x88, 0x29, 0x74,
	0x09, 0xb5, 0xe3, 0x0c, 0x77, 0x94, 0xbe, 0x98, 0x46, 0x75, 0x38, 0x67, 0xd4, 0x3a, 0xc4, 0xbd,
	0x8e, 0x82, 0xd9, 0x30, 0x49, 0x42, 0x06, 0x5d, 0x41, 0xfd, 0xb8, 0xd1, 0xed, 0x5f, 0xef, 0xac,
	0xec, 0xe0, 0xe2, 0xe9, 0x6c, 0xc9, 0x7e, 0xf4, 0xee, 0xc8, 0x2e, 0x09, 0xda, 0x7c, 0x05, 0xdb,
	0x33, 0x59, 0x84, 0x93, 0xe3, 0x4b, 0xee, 0xfe, 0x05, 0x00, 0x00, 0xff, 0xff, 0x3b, 0xcf, 0x39,
	0xd2, 0xf9, 0x01, 0x00, 0x00,
}
